// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :exec
INSERT INTO jobs (session_id, user_id, timestamp) VALUES (?, ?, CURRENT_TIMESTAMP)
`

type CreateJobParams struct {
	SessionID sql.NullString `json:"session_id"`
	UserID    sql.NullString `json:"user_id"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.exec(ctx, q.createJobStmt, createJob, arg.SessionID, arg.UserID)
	return err
}

const getUserJobDetails = `-- name: GetUserJobDetails :many
SELECT jobs.session_id, user_id, timestamp, media.session_id, media_id, creation_date, filename, old_size, new_size, done FROM jobs
LEFT JOIN media ON jobs.session_id = media.session_id
 WHERE user_id = ?
`

type GetUserJobDetailsRow struct {
	SessionID    sql.NullString `json:"session_id"`
	UserID       sql.NullString `json:"user_id"`
	Timestamp    sql.NullInt64  `json:"timestamp"`
	SessionID_2  sql.NullString `json:"session_id_2"`
	MediaID      sql.NullString `json:"media_id"`
	CreationDate sql.NullInt64  `json:"creation_date"`
	Filename     sql.NullString `json:"filename"`
	OldSize      sql.NullInt64  `json:"old_size"`
	NewSize      sql.NullInt64  `json:"new_size"`
	Done         sql.NullInt64  `json:"done"`
}

func (q *Queries) GetUserJobDetails(ctx context.Context, userID sql.NullString) ([]GetUserJobDetailsRow, error) {
	rows, err := q.query(ctx, q.getUserJobDetailsStmt, getUserJobDetails, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserJobDetailsRow
	for rows.Next() {
		var i GetUserJobDetailsRow
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.Timestamp,
			&i.SessionID_2,
			&i.MediaID,
			&i.CreationDate,
			&i.Filename,
			&i.OldSize,
			&i.NewSize,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
