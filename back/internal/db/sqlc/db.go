// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.clearUserTmpMediaStmt, err = db.PrepareContext(ctx, clearUserTmpMedia); err != nil {
		return nil, fmt.Errorf("error preparing query ClearUserTmpMedia: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createMediaStmt, err = db.PrepareContext(ctx, createMedia); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMedia: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getMediasStmt, err = db.PrepareContext(ctx, getMedias); err != nil {
		return nil, fmt.Errorf("error preparing query GetMedias: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByTokenHashStmt, err = db.PrepareContext(ctx, getUserByTokenHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByTokenHash: %w", err)
	}
	if q.getUserJobDetailsStmt, err = db.PrepareContext(ctx, getUserJobDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserJobDetails: %w", err)
	}
	if q.removeMediaStmt, err = db.PrepareContext(ctx, removeMedia); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveMedia: %w", err)
	}
	if q.setMediaDoneStmt, err = db.PrepareContext(ctx, setMediaDone); err != nil {
		return nil, fmt.Errorf("error preparing query SetMediaDone: %w", err)
	}
	if q.setMediaTimestampStmt, err = db.PrepareContext(ctx, setMediaTimestamp); err != nil {
		return nil, fmt.Errorf("error preparing query SetMediaTimestamp: %w", err)
	}
	if q.updateUserSubscriptionStmt, err = db.PrepareContext(ctx, updateUserSubscription); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserSubscription: %w", err)
	}
	if q.updateUserTokenStmt, err = db.PrepareContext(ctx, updateUserToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.clearUserTmpMediaStmt != nil {
		if cerr := q.clearUserTmpMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing clearUserTmpMediaStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createMediaStmt != nil {
		if cerr := q.createMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMediaStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getMediasStmt != nil {
		if cerr := q.getMediasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMediasStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByTokenHashStmt != nil {
		if cerr := q.getUserByTokenHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByTokenHashStmt: %w", cerr)
		}
	}
	if q.getUserJobDetailsStmt != nil {
		if cerr := q.getUserJobDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserJobDetailsStmt: %w", cerr)
		}
	}
	if q.removeMediaStmt != nil {
		if cerr := q.removeMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeMediaStmt: %w", cerr)
		}
	}
	if q.setMediaDoneStmt != nil {
		if cerr := q.setMediaDoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setMediaDoneStmt: %w", cerr)
		}
	}
	if q.setMediaTimestampStmt != nil {
		if cerr := q.setMediaTimestampStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setMediaTimestampStmt: %w", cerr)
		}
	}
	if q.updateUserSubscriptionStmt != nil {
		if cerr := q.updateUserSubscriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserSubscriptionStmt: %w", cerr)
		}
	}
	if q.updateUserTokenStmt != nil {
		if cerr := q.updateUserTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	clearUserTmpMediaStmt      *sql.Stmt
	createJobStmt              *sql.Stmt
	createMediaStmt            *sql.Stmt
	createUserStmt             *sql.Stmt
	getMediasStmt              *sql.Stmt
	getUserStmt                *sql.Stmt
	getUserByTokenHashStmt     *sql.Stmt
	getUserJobDetailsStmt      *sql.Stmt
	removeMediaStmt            *sql.Stmt
	setMediaDoneStmt           *sql.Stmt
	setMediaTimestampStmt      *sql.Stmt
	updateUserSubscriptionStmt *sql.Stmt
	updateUserTokenStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		clearUserTmpMediaStmt:      q.clearUserTmpMediaStmt,
		createJobStmt:              q.createJobStmt,
		createMediaStmt:            q.createMediaStmt,
		createUserStmt:             q.createUserStmt,
		getMediasStmt:              q.getMediasStmt,
		getUserStmt:                q.getUserStmt,
		getUserByTokenHashStmt:     q.getUserByTokenHashStmt,
		getUserJobDetailsStmt:      q.getUserJobDetailsStmt,
		removeMediaStmt:            q.removeMediaStmt,
		setMediaDoneStmt:           q.setMediaDoneStmt,
		setMediaTimestampStmt:      q.setMediaTimestampStmt,
		updateUserSubscriptionStmt: q.updateUserSubscriptionStmt,
		updateUserTokenStmt:        q.updateUserTokenStmt,
	}
}
