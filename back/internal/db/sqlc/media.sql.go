// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media.sql

package db

import (
	"context"
	"database/sql"
)

const createMedia = `-- name: CreateMedia :exec
INSERT INTO media (session_id, media_id, creation_date, filename, old_size, new_size, done) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateMediaParams struct {
	SessionID    sql.NullString `json:"session_id"`
	MediaID      sql.NullString `json:"media_id"`
	CreationDate sql.NullInt64  `json:"creation_date"`
	Filename     sql.NullString `json:"filename"`
	OldSize      sql.NullInt64  `json:"old_size"`
	NewSize      sql.NullInt64  `json:"new_size"`
	Done         sql.NullInt64  `json:"done"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) error {
	_, err := q.exec(ctx, q.createMediaStmt, createMedia,
		arg.SessionID,
		arg.MediaID,
		arg.CreationDate,
		arg.Filename,
		arg.OldSize,
		arg.NewSize,
		arg.Done,
	)
	return err
}

const setMediaDone = `-- name: SetMediaDone :exec
UPDATE media SET done = ?, new_size = ? WHERE media_id = ?
`

type SetMediaDoneParams struct {
	Done    sql.NullInt64  `json:"done"`
	NewSize sql.NullInt64  `json:"new_size"`
	MediaID sql.NullString `json:"media_id"`
}

func (q *Queries) SetMediaDone(ctx context.Context, arg SetMediaDoneParams) error {
	_, err := q.exec(ctx, q.setMediaDoneStmt, setMediaDone, arg.Done, arg.NewSize, arg.MediaID)
	return err
}
