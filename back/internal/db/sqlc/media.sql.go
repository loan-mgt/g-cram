// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media.sql

package sqlc

import (
	"context"
	"database/sql"
)

const clearUserTmpMedia = `-- name: ClearUserTmpMedia :exec
DELETE FROM media WHERE user_id = ? and timestamp = NULL
`

func (q *Queries) ClearUserTmpMedia(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.clearUserTmpMediaStmt, clearUserTmpMedia, userID)
	return err
}

const countUserMedia = `-- name: CountUserMedia :one
SELECT COUNT(*) FROM media WHERE user_id = ? and step = 0
`

func (q *Queries) CountUserMedia(ctx context.Context, userID string) (int64, error) {
	row := q.queryRow(ctx, q.countUserMediaStmt, countUserMedia, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserMediaInJob = `-- name: CountUserMediaInJob :one
SELECT COUNT(*) FROM media WHERE user_id = ? and timestamp = ?
`

type CountUserMediaInJobParams struct {
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
}

func (q *Queries) CountUserMediaInJob(ctx context.Context, arg CountUserMediaInJobParams) (int64, error) {
	row := q.queryRow(ctx, q.countUserMediaInJobStmt, countUserMediaInJob, arg.UserID, arg.Timestamp)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserMediaInJobAtStep = `-- name: CountUserMediaInJobAtStep :one
SELECT COUNT(*) FROM media WHERE user_id = ? and timestamp = ? and step >= ?
`

type CountUserMediaInJobAtStepParams struct {
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
	Step      int64  `json:"step"`
}

func (q *Queries) CountUserMediaInJobAtStep(ctx context.Context, arg CountUserMediaInJobAtStepParams) (int64, error) {
	row := q.queryRow(ctx, q.countUserMediaInJobAtStepStmt, countUserMediaInJobAtStep, arg.UserID, arg.Timestamp, arg.Step)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMedia = `-- name: CreateMedia :exec
INSERT INTO media (user_id, timestamp, media_id, creation_date, filename, base_url, old_size, new_size, step, done) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0, ?)
`

type CreateMediaParams struct {
	UserID       string        `json:"user_id"`
	Timestamp    int64         `json:"timestamp"`
	MediaID      string        `json:"media_id"`
	CreationDate int64         `json:"creation_date"`
	Filename     string        `json:"filename"`
	BaseUrl      string        `json:"base_url"`
	OldSize      sql.NullInt64 `json:"old_size"`
	NewSize      sql.NullInt64 `json:"new_size"`
	Done         int64         `json:"done"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) error {
	_, err := q.exec(ctx, q.createMediaStmt, createMedia,
		arg.UserID,
		arg.Timestamp,
		arg.MediaID,
		arg.CreationDate,
		arg.Filename,
		arg.BaseUrl,
		arg.OldSize,
		arg.NewSize,
		arg.Done,
	)
	return err
}

const getJobSpace = `-- name: GetJobSpace :one
SELECT SUM(new_size) as sum_new_size, SUM(old_size) as sum_old_size FROM media WHERE user_id = ? and timestamp = ?
`

type GetJobSpaceParams struct {
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
}

type GetJobSpaceRow struct {
	SumNewSize sql.NullFloat64 `json:"sum_new_size"`
	SumOldSize sql.NullFloat64 `json:"sum_old_size"`
}

func (q *Queries) GetJobSpace(ctx context.Context, arg GetJobSpaceParams) (GetJobSpaceRow, error) {
	row := q.queryRow(ctx, q.getJobSpaceStmt, getJobSpace, arg.UserID, arg.Timestamp)
	var i GetJobSpaceRow
	err := row.Scan(&i.SumNewSize, &i.SumOldSize)
	return i, err
}

const getMedia = `-- name: GetMedia :one
SELECT user_id, timestamp, media_id, creation_date, filename, base_url, old_size, new_size, step, done FROM media WHERE media_id = ? and user_id = ? and timestamp = ?
`

type GetMediaParams struct {
	MediaID   string `json:"media_id"`
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
}

func (q *Queries) GetMedia(ctx context.Context, arg GetMediaParams) (Medium, error) {
	row := q.queryRow(ctx, q.getMediaStmt, getMedia, arg.MediaID, arg.UserID, arg.Timestamp)
	var i Medium
	err := row.Scan(
		&i.UserID,
		&i.Timestamp,
		&i.MediaID,
		&i.CreationDate,
		&i.Filename,
		&i.BaseUrl,
		&i.OldSize,
		&i.NewSize,
		&i.Step,
		&i.Done,
	)
	return i, err
}

const getMediaCurrentStep = `-- name: GetMediaCurrentStep :one
SELECT step FROM media WHERE media_id = ? and user_id = ?
`

type GetMediaCurrentStepParams struct {
	MediaID string `json:"media_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) GetMediaCurrentStep(ctx context.Context, arg GetMediaCurrentStepParams) (int64, error) {
	row := q.queryRow(ctx, q.getMediaCurrentStepStmt, getMediaCurrentStep, arg.MediaID, arg.UserID)
	var step int64
	err := row.Scan(&step)
	return step, err
}

const getMedias = `-- name: GetMedias :many
SELECT user_id, timestamp, media_id, creation_date, filename, base_url, old_size, new_size, step, done FROM media WHERE user_id = ? and step = 0
`

func (q *Queries) GetMedias(ctx context.Context, userID string) ([]Medium, error) {
	rows, err := q.query(ctx, q.getMediasStmt, getMedias, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.UserID,
			&i.Timestamp,
			&i.MediaID,
			&i.CreationDate,
			&i.Filename,
			&i.BaseUrl,
			&i.OldSize,
			&i.NewSize,
			&i.Step,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserJob = `-- name: GetUserJob :many
SELECT COUNT(*) as nb_media, SUM(done) as nb_media_done, timestamp, SUM(old_size) as old_size, SUM(new_size) as new_size FROM media WHERE user_id = ? GROUP BY timestamp ORDER BY timestamp DESC LIMIT 5
`

type GetUserJobRow struct {
	NbMedia     int64           `json:"nb_media"`
	NbMediaDone sql.NullFloat64 `json:"nb_media_done"`
	Timestamp   int64           `json:"timestamp"`
	OldSize     sql.NullFloat64 `json:"old_size"`
	NewSize     sql.NullFloat64 `json:"new_size"`
}

func (q *Queries) GetUserJob(ctx context.Context, userID string) ([]GetUserJobRow, error) {
	rows, err := q.query(ctx, q.getUserJobStmt, getUserJob, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserJobRow
	for rows.Next() {
		var i GetUserJobRow
		if err := rows.Scan(
			&i.NbMedia,
			&i.NbMediaDone,
			&i.Timestamp,
			&i.OldSize,
			&i.NewSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMedia = `-- name: RemoveMedia :exec
DELETE FROM media WHERE media_id = ?
`

func (q *Queries) RemoveMedia(ctx context.Context, mediaID string) error {
	_, err := q.exec(ctx, q.removeMediaStmt, removeMedia, mediaID)
	return err
}

const setMediaDone = `-- name: SetMediaDone :exec
UPDATE media SET done = ? WHERE media_id = ? and user_id = ? and timestamp = ?
`

type SetMediaDoneParams struct {
	Done      int64  `json:"done"`
	MediaID   string `json:"media_id"`
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
}

func (q *Queries) SetMediaDone(ctx context.Context, arg SetMediaDoneParams) error {
	_, err := q.exec(ctx, q.setMediaDoneStmt, setMediaDone,
		arg.Done,
		arg.MediaID,
		arg.UserID,
		arg.Timestamp,
	)
	return err
}

const setMediaNewSize = `-- name: SetMediaNewSize :exec
UPDATE media SET new_size = ? WHERE media_id = ? and user_id = ? and timestamp = ?
`

type SetMediaNewSizeParams struct {
	NewSize   sql.NullInt64 `json:"new_size"`
	MediaID   string        `json:"media_id"`
	UserID    string        `json:"user_id"`
	Timestamp int64         `json:"timestamp"`
}

func (q *Queries) SetMediaNewSize(ctx context.Context, arg SetMediaNewSizeParams) error {
	_, err := q.exec(ctx, q.setMediaNewSizeStmt, setMediaNewSize,
		arg.NewSize,
		arg.MediaID,
		arg.UserID,
		arg.Timestamp,
	)
	return err
}

const setMediaOldSize = `-- name: SetMediaOldSize :exec
UPDATE media SET old_size = ? WHERE media_id = ? and user_id = ? and timestamp = ?
`

type SetMediaOldSizeParams struct {
	OldSize   sql.NullInt64 `json:"old_size"`
	MediaID   string        `json:"media_id"`
	UserID    string        `json:"user_id"`
	Timestamp int64         `json:"timestamp"`
}

func (q *Queries) SetMediaOldSize(ctx context.Context, arg SetMediaOldSizeParams) error {
	_, err := q.exec(ctx, q.setMediaOldSizeStmt, setMediaOldSize,
		arg.OldSize,
		arg.MediaID,
		arg.UserID,
		arg.Timestamp,
	)
	return err
}

const setMediaStep = `-- name: SetMediaStep :exec
UPDATE media SET step = ? WHERE media_id = ? and user_id = ? and timestamp = ?
`

type SetMediaStepParams struct {
	Step      int64  `json:"step"`
	MediaID   string `json:"media_id"`
	UserID    string `json:"user_id"`
	Timestamp int64  `json:"timestamp"`
}

func (q *Queries) SetMediaStep(ctx context.Context, arg SetMediaStepParams) error {
	_, err := q.exec(ctx, q.setMediaStepStmt, setMediaStep,
		arg.Step,
		arg.MediaID,
		arg.UserID,
		arg.Timestamp,
	)
	return err
}

const setMediaTimestamp = `-- name: SetMediaTimestamp :exec
UPDATE media SET timestamp = ? WHERE media_id = ? and user_id = ? and timestamp = ?
`

type SetMediaTimestampParams struct {
	Timestamp   int64  `json:"timestamp"`
	MediaID     string `json:"media_id"`
	UserID      string `json:"user_id"`
	Timestamp_2 int64  `json:"timestamp_2"`
}

func (q *Queries) SetMediaTimestamp(ctx context.Context, arg SetMediaTimestampParams) error {
	_, err := q.exec(ctx, q.setMediaTimestampStmt, setMediaTimestamp,
		arg.Timestamp,
		arg.MediaID,
		arg.UserID,
		arg.Timestamp_2,
	)
	return err
}
